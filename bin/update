#!/bin/bash

echo 'Updating vim plug'
if [[ -e "$HOME/.vim/autoload/plug.vim" ]]; then
  rm $HOME/.vim/autoload/plug.vim
fi
curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
# To update the plugins just run :PlugUpdate

echo 'Updating XVim'
if [[ -e "$HOME/.dotfiles/bin/xvim" ]]; then
  cd "$HOME/.dotfiles/bin/xvim"
  git pull
  make
else
  cd "$HOME/.dotfiles/bin"
  git clone git@github.com:XVimProject/XVim.git
  make
fi

if [[ -e "$HOME/tools" ]]; then
  echo 'Updating fuzzdb'
  if [[ -e "$HOME/tools/burp/fuzzdb" ]]; then
    cd "$HOME/tools/burp/fuzzdb"
    git pull
  else
    cd "$HOME/tools/burp"
    git clone git@github.com:fuzzdb-project/fuzzdb.git
  fi

if [[ $(groups | grep -q -e '\badmin\b')$? -ne 0 ]]; then
  read -p "Enter the administrator username: " admin
else
  admin=$(whoami)
fi

  echo 'Updating dirbuster-ng'
  if [[ -e "$HOME/.dotfiles/bin/dirbuster-ng/build" ]]; then
    cd "$HOME/.dotfiles/bin/dirbuster-ng"
    git pull
    cd build
    cmake ..
    sudo -u $admin sudo make install
  else
    cd "$HOME/.dotfiles/bin"
    git clone git@github.com:digination/dirbuster-ng.git
    cd dirbuster-ng; mkdir build; cd build
    cmake ..
    sudo -u $admin sudo make install
  fi
fi

echo; echo 'Running brew update, upgrade, cleanup and checkup'
sudo -H -u $admin brew update
sudo -H -u $admin brew upgrade --all
sudo -H -u $admin brew upgrade brew-cask
sudo -H -u $admin brew cleanup
sudo -H -u $admin brew cask cleanup
sudo -H -u $admin brew doctor

echo; echo 'Updating pip and pip packages'
  sudo -H -u $admin pip install --upgrade pip setuptools
  sudo -H -u $admin pip3 install --upgrade pip setuptools
  if [[ $(pip list | grep -F 'pyobjc (' >/dev/null 2>&1) -eq 0 ]]; then
    echo; echo 'Updating pyobjc'
    sudo -H -su $admin "pip install -U pyobjc"
  fi
  if [[ $(pip3 list | grep -F "peewee (" >/dev/null 2>&1) -eq 0 ]]; then
    echo; echo 'Updating peewee'
    sudo -H -su $admin "pip3 install -U peewee"
  fi
  if [[ $(pip list | grep -F "pycrypto (" >/dev/null 2>&1) -eq 0 ]]; then
    echo; echo 'Updating pycrypto'
    sudo -H -su $admin "pip install -U pycrypto"
  fi

echo; echo 'Updating karabiner/seil sets'
/Applications/Karabiner.app/Contents/Library/bin/karabiner export > "$HOME/.dotfiles/conf/osx/key-bindings/karabiner-import.sh"
/Applications/Seil.app/Contents/Library/bin/seil export > "$HOME/.dotfiles/conf/osx/key-bindings/seil-import.sh"

#if [[ -e "$HOME/.aws" ]]; then
#  echo; echo "Updating AWS configurations"
#  cp -R $USER_HOME/.aws $DOTFILES_HOME/conf/local/.aws
#fi

if [[ -e "$HOME/.bash" && -e "$HOME/.dotfiles/copy/.bash" ]]; then
  echo; echo "Backing up various bash scripts"
  cp -R $HOME/.bash/* $HOME/.dotfiles/copy/.bash/ 
fi

if [[ -e "$HOME/.config/profanity" ]]; then
  echo; echo "Backing up Profanity settings"
  cp -R $HOME/.config/profanity/* $HOME/.dotfiles/conf/local/profanity/ 
fi

if [[ -e "$HOME/.local/share/profanity" ]]; then
  cp -R $HOME/.local/share/profanity/* $HOME/.dotfiles/conf/local/profanity/local/
fi

if [[ -e /usr/bin/vagrant ]]; then 
  echo; echo "Updating Vagrant VMWare plugin"
  vagrant plugin install vagrant-vmware-fusion
fi

if [[ -e "$HOME/.dotfiles/bin/update_local" ]]; then
  source "$HOME/.dotfiles/bin/update_local"
fi

if [[ -e "/Volumes/disk3" ]]; then
  echo; echo "Updating dotfiles"
  rsync -ar --executability --delete --stats $HOME/.dotfiles/ /Volumes/disk3/.dotfiles
  #echo; echo "Updating pso"
  #rsync -ar --executability --delete --stats $HOME/resources/ /Volumes/disk3/pso
  echo; echo "Updating rsrch"
  rsync -ar --executability --delete --stats $HOME/research/ /Volumes/disk3/rsrch
fi

echo; echo "Running Apple's Software Update Tool..."
sudo softwareupdate --install --all
