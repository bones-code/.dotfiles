# Mail Preferences/Settings
# -------------------------
set ssl_force_tls=yes                   # always use TLS when connecting to a server
set ssl_use_sslv2=no
set ssl_use_sslv3=no
set ssl_use_tlsv1=yes
set ssl_use_tlsv1_1=yes
set ssl_use_tlsv1_2=yes
set ssl_ciphers="ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK"

set smtp_authenticators="login:plain"

set mbox_type = maildir
set realname="cara marie"               # me settings
set sig_on_top=yes

source ~/.mutt/solar.muttrc             # custom colorscheme
set entropy_file=/dev/urandom           # where to get chaos

set mail_check = 5                      # how often to check for mail in seconds
#set beep_new=no                         # noise for new mail

# Editor settings
set fast_reply=yes                      # no prompting on reply
set editor="vim -u ~/.mutt/mutt.vimrc"
set tilde                               # show tildes like in vim
set envelope_from=yes
set attribution="%n writes:\n"
set forward_format="FW: %s"
set include=yes                         # quote msg in reply
set markers=no                          # no + on wrapped lines
set charset="utf-8"
set send_charset="utf-8"
set text_flowed=yes

# View sets
set sort=reverse-threads
set sort_aux=last-date-received
set move=no
set status_on_top                       # put status line at top
set menu_scroll
set quote_regexp="^([ \t]*[|>:}#%])+"
set implicit_autoview                   # default no
set mailcap_path= ~/.mutt/.mailcap      # entries for filetypes
set mask="^."                           # show everything in folder view

auto_view text/html                     # view html automatically -- fuck you outlook
alternative_order text/plain text/enriched text/html

# Pager sets
set pager_stop=yes
set pager_format=""
set pager_context=1
set pager_index_lines=10                # show a mini-index in pager

# Header sets
ignore *
unignore From:
unignore To:
unignore Reply-To:
unignore Mail-Followup-To:
unignore Subject:
unignore Date:
unignore Organization:
unignore Newsgroups:
unignore CC:
unignore BCC:
unignore Message-ID:
unignore X-Mailer:
set edit_headers
my_hdr User-Agent: Mutt
set use_from=yes
set to_chars=""
set autoedit
set sig_dashes 
set confirmappend=no                    # no prompt for save to =keep

# Other settings
set status_format=" mutt-$MUTT_ACCOUNT://%h/%f (%n)    %> %P of %m (%l) "
set index_format="%3C %Z | %22F   %s %> %[%R | %a, %d %b]"
set folder_format="%2C %t %8s %d %N %f"
set date_format="%e %b %Y"
set ascii_chars=yes
set mask="!^\\.[^.]"
set hidden_host=yes
set hostname="null"
set to_chars=" +TCF"                     # no L for mail_list
set net_inc=1                            # display download progress every *k
set mime_forward_rest = yes
set mime_forward = ask-no

# Key Bindings
# ------------
bind index gg  first-entry
bind index G   last-entry
bind index R   group-reply
bind index B   bounce-message
bind pager B   bounce-message
bind index N search-opposite
bind pager N search-opposite
bind pager h display-toggle-weed  	    # toggle headers with h key
bind index \' next-unread 		        # move to the next unread message
bind index \C? what-key                 # display the keycode for a key press
bind pager \C? what-key                 
bind browser r check-new 		        # refresh file list on ^L"
macro index O "<shell-escape>offlineimap -o<enter>"           "run offlineimap to sync all mail"
macro index o "<shell-escape>offlineimap -qof INBOX<enter>" "run offlineimap to sync inbox"
macro index S "<enter-command>unset wait_key<enter><shell-escape>mutt-notmuch-py ~/.mail/search<enter><change-folder-readonly>~/.mail/search<enter>" "search mail (using notmuch)"
macro index \cd "l~d `date +%d`\n" 'Show daily messages'
macro index .i  "l((~N|~O|~F)!~D)|(~d<1w!~Q)\n" 'new,old,flagged but undeleted,unreplied'
macro index .n  "l~N\n" 'new messages'
macro index .f	"l~F\n" 'flagged messages'
macro index .o  "l(~N|~O)\n" 'new and old unread messages'
macro index .a  "l~A\n" 'all messages (reset)'
macro index .t  "l~d<1d\n" 'todays messages'
macro index .d  "l~d<2d|~F\n" 'todays and yesterdays, plus flagged'
macro index .y  "l~d<2d ~d>1d\n" 'yesterdays messages'
folder-hook .   push '.d'

# Take me home now
macro index H "c?\t"
macro pager H "c?\t"

# Change folders
macro index 'c' '<change-folder>?<change-dir><home>^K=<enter>'
macro index \Cr "T~U<enter><tag-prefix><clear-flag>N<untag-pattern>.<enter>" "mark all messages as read"

# Use urlview to see links
macro index \Cu "|urlview<enter>" "call urlview to open links"
macro pager \Cu "|urlview<enter>" "call urlview to open links"
set pipe_decode=yes                     # prevent urls from being cut off

# Search contacts
set query_command="contacts -Sf '%eTOKEN%n' '%s' | sed -e 's/TOKEN/\t/g'"
bind editor <Tab> complete-query
bind editor ^T    complete

# Local Folders
set folder = ~/.mail
set header_cache = ~/.mutt/cache/headers
set message_cachedir = ~/.mutt/cache/bodies
set certificate_file = ~/.mutt/certs/certificates
mailboxes +isec/inbox +ncc/inbox +apple/inbox +temporary/search
#set spoolfile = +isec/inbox             # Set the initial open mailbox
set spoolfile = +ncc/inbox             # Set the initial open mailbox

# PGP Sets
# --------
#set keyserver subkeys.pgp.net
#unset crypt_use_gpgme
#
# decode application/pgp
set pgp_decode_command="gpg2 --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# verify a pgp/mime signature
set pgp_verify_command="gpg2 --status-fd=2 --no-verbose --quiet --batch --output - --verify %s %f"

# decrypt a pgp/mime attachment
set pgp_decrypt_command="gpg2 --status-fd=2 %?p?--passphrase-fd 0? --no-verbose --quiet --batch --output - %f"

# create a pgp/mime signed attachment
# set pgp_sign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"
set pgp_sign_command="gpg2 --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --detach-sign --textmode %?a?-u %a? %f"

# create a application/pgp signed (old-style) message
# set pgp_clearsign_command="gpg-2comp --comment '' --no-verbose --batch --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"
set pgp_clearsign_command="gpg2 --no-verbose --batch --quiet --output - %?p?--passphrase-fd 0? --armor --textmode --clearsign %?a?-u %a? %f"

# create a pgp/mime encrypted attachment
# set pgp_encrypt_only_command="pgpewrap gpg-2comp -v --batch --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"
#set pgp_encrypt_only_command="pgpewrap gpg2 --batch --quiet --no-verbose --output - --encrypt --textmode --armor --always-trust -- -r %r -- %f"

# create a pgp/mime encrypted and signed attachment
# set pgp_encrypt_sign_command="pgpewrap gpg-2comp %?p?--passphrase-fd 0? -v --batch --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"
#set pgp_encrypt_sign_command="pgpewrap gpg2 %?p?--passphrase-fd 0? --batch --quiet --no-verbose --textmode --output - --encrypt --sign %?a?-u %a? --armor --always-trust -- -r %r -- %f"

# import a key into the public key ring
set pgp_import_command="gpg2 --no-verbose --import %f"

# export a key from the public key ring
set pgp_export_command="gpg2 --no-verbose --export --armor %r"

# verify a key
set pgp_verify_key_command="gpg2 --verbose --batch --fingerprint --check-sigs %r"

# read in the public key ring
set pgp_list_pubring_command="gpg2 --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-keys %r"

# read in the secret key ring
set pgp_list_secring_command="gpg2 --no-verbose --batch --quiet --with-colons --with-fingerprint --with-fingerprint --list-secret-keys %r"

# fetch keys
# set pgp_getkeys_command="pkspxycwrap %r"

# pattern for good signature - may need to be adapted to locale!

# set pgp_good_sign="^gpgv?: Good signature from "

# OK, here's a version which uses gnupg's message catalog:
# set pgp_good_sign="`gettext -d gnupg -s 'Good signature from "' | tr -d '"'`"

# This version uses --status-fd messages
set pgp_good_sign="^\\[GNUPG:\\] GOODSIG"

# pattern to verify a decryption occurred
set pgp_decryption_okay="^\\[GNUPG:\\] DECRYPTION_OKAY"


set pgp_use_gpg_agent=yes
#set crypt_use_gpgme=yes
#set crypt_autosign=yes
#set crypt_verify_sig=yes
#set crypt_replysign=yes
#set crypt_replyencrypt=yes
#set crypt_replysignencrypted=yes
set smime_is_default=no
message-hook '!(~g|~G) ~b"^-----BEGIN\ PGP\ (SIGNED\ )?MESSAGE"' "exec check-traditional-pgp"
color body green default "-----BEGIN PGP SIGNED MESSAGE-----"
color body green default "-----BEGIN PGP SIGNATURE-----"
color body green default "-----END PGP SIGNED MESSAGE-----"
color body green default "-----END PGP SIGNATURE-----"

# Accounts
# --------
folder-hook ~/.mail/isec/ 'source "~/.mutt/local-isec.muttrc'
folder-hook ~/.mail/ncc/ 'source "~/.mutt/local-ncc.muttrc'
folder-hook ~/.mail/apple/ 'source "~/.mutt/local-apple.muttrc'

